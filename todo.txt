implement bitmap drawing, give led_canvas a bmp member to act as an extra buffer for bmp manipulation
depreciate remapXY and move all logic to update(), or have update() use separate logic which doesn't require xy values
	^^alternatively, introduce a remapIndex function which does the same thing but using a single input
	^^ which one will contain the logic? either have remapIndex call remapXY or have remapXY call remapIndex

update formatting to match that of adafruit gfx library

add a proper readme

bitmap stuff:

fillbitmap() -> fils bitmap with solid color (really just draws a rectangle at point
renderxpm() -> renders bitmap image to the bitmap array
displayBitmap() -> copies bitmap to led array
		|-> just calls blitBitmap() but for each panel (my code doesn't use multiple panels so just use blitBitmap instead)


can't store .bmp images in memory, need to use an SD card??? (which I can't do on the playground express?)
might have to get around this by converting .bmp to .xbm to load as code, then manually fill the bmp array

is there a reason (other than potential use with SD card) to use QDBMP? seems like qdbmp isn't needed to read XBPs


delete all bitmap support to make it more streamlined? maybe create a new branch just to save the code just in case

do I need a whole class for led_canvas? other idea: make remapIndex (and related functions) its own set of functions, have leds[] and leds_buffer[] defined in main, only use new remapIndex class for translating between leds_buffer[] and leds[], make (or find) separate graphics library for performing operations on leds_buffer (should be easier since there's no funky translation needed for drawPoint anymore)

^^maybe name it something like "canvashelper"? have it store the info for the matrix (size, orientation, wrap, etc.) and provide functionalities such as converting between index/xy, translating between normal and formatted matrix, whether or not a point is inbounds

are normal graphics libraries lightweight enough for arduino?




PROPOSED SOLUTION 1: CLASSLESS
- Store all relevant translation information as #define imperatives (width, height, origin, wrap, snake)
- Store leds_buffer[] in main along with leds[]
- Move helper functions to main (inbounds, toIndex/toXY, remapIndex/remapXY)
- Store all drawing functions in separate Graphics class which can either have its own array or use a pointer to an existing array. only info that would have to be stored again in graphics class would be width and height
Possible Problems
- Accessability - how easy would it be to access and use the helper functions/buffer from another class or file (such as using a separate file for each animation)?
- Neatness - Having all the helper functions for copying from the buffer would be nice to have in their own class to help prevent confusion and cluttering up main

PROPOSED SOLUTION 2: HELPER CLASS
- Store all relevant translation information within a helper class (width, height, origin, wrap, snake)
- Store leds_buffer[] in main along with leds[] and store a pointer to it in the helper class
- Allow access to leds_buffer and associated information through the use of accessor methods
- Store all drawing functions in separate Graphics class which can either have its own array or use a pointer to an existing array. only info that would have to be stored again in graphics class would be width and height
Possible Problems
- Size: Does creating an instance of a helper class with extra variables and stuff take up space when it doesn't need to? Also does having a separate file for the class clutter the project more than it needs to be?
- Repetition: Size (total, x, y) is already defined through preprocessing directives, is storing it in the class again a bad idea?

Things to keep in mind when choosing:
- How easy is it to integrate a 3rd party graphics library using one approach vs the other?
- Which would be easier to work with as a developer?
- Which would provide better efficiency with the hardware?