TODO LIST:
- update formatting to match that of adafruit gfx library
- add a proper readme
- add define guards to .h files
- function for drawing sprites
- ability to draw rotated sprites

______________________

BUG LIST:
- why are leds being drawn improperly when calling FastLed.show() without calling canvas.update()?????
	- adding a delay fixes this, but not when using fastLED.delay() - might have something to do with calling function too quickly??? (fastLED.delay() repeatedly calls fastLED.show() while waiting)
	- could also be related to calling fastLED.show() back-to-back?
	- UPDATE: Definitely seems to be related to the data polling speed, although it seems like the speed should be correct (1ms), maybe try manually setting clock speed in constructor?

______________________


listen() -> changes newMode variable to 1
each animation checks if newMode is 0 or 1, if it's 0 then loop if it's 1 then call changeMode() (which changes mode and sets newMode to 0)

^^potential problems: 
- does this mess up frame timing with millis() since loop() doesn't reset after each frame?
- would dead frame time need to be filled with a loop that repeatedly calls listen()? if so then that breaks FastLED 
	-^^ no it doesn't, manually call FastLED.show() once per iteration since FastLED.delay() just calls show() every frame anyways

ways of storing animations:
- case/switch in loop() which runs certain code/animations based on current mode variable value
- each animation as its own function in a separate file
- each animation as its own function, each with its own file
>>for the above, is it possible to sequentially add files in a folder to an array then call the function that corresponds to the index?

>>
- have folder called 'animations'
- have each animation function be in its own file in this folder
- either at compile or run time, add functions to an array in alphabetical order
- when choosing which animation to run, call anims[mode]()

>>
- have file called 'animations.ino'
- have each animation be its own function (or class)

MASKING: create a type 'mask' which can be several different things? i.e. sprite, rectangular area, circle, line, etc. maybe have each item of type mask have a check() function which checks if a given index is a 1 or a 0, implementation varies depending on what kind of mask it is

STATIC VARIABLES KEEP THEIR VALUES THROUGHOUT DIFFERENT CALLS OF A FUNCTION
STATIC CLASS VARIABLES ARE SHARED BETWEEN INSTANCES OF THE CLASS
STATIC FUNCTIONS IN A CLASS CAN BE USED WITHOUT AN INSTANCE

use init when functions in constructor can't guarantee success

MODES vs ANIMATIONS
MODES: emoticons, eyeball, flowey, 8ball, etc. changes when you press channel up or down. Determines what animations are played.
ANIMATIONS: can play and render concurrently. 
Both need to implement the update() functionality